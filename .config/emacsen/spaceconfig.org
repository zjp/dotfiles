* TODOs
- 1 :: Only run =clang-format= on save if there's a .clang-format in project root
* Bootstrapping
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode)))
(set-face-bold-p 'bold nil)
(global-display-line-numbers-mode)
(add-hook 'vterm-mode-hook (lambda ()
                             (setq-local global-hl-line-mode -1)
                             (display-line-numbers-mode -1)))
(add-hook 'treemacs-mode-hook (lambda ()
                                (display-line-numbers-mode -1)))
(add-hook 'spacemacs-buffer-mode-hook (lambda ()
                                        (display-line-numbers-mode -1)))
(add-hook 'term-mode-hook (lambda ()
                            (display-line-numbers-mode -1)))

#+end_src
** Add Resources to Load Path
*** authinfo
This one's gonna stay encrypted.
#+BEGIN_SRC emacs-lisp
(setq auth-sources "~/.authinfo.gpg")
#+END_SRC
*** GNU/Linux
#+begin_src emacs-lisp
(cond ((eq system-type 'gnu/linux)
       (use-package gruvbox-theme
         :load-path "~/git/emacs-theme-gruvbox/")
       (use-package atom-one-dark-theme
         :load-path "~/git/atom-one-dark-theme/")
       (use-package spaceline-all-the-icons
         :load-path "~/git/spaceline-all-the-icons.el/")
       (require 'exec-path-from-shell)
       (exec-path-from-shell-initialize)
       (exec-path-from-shell-copy-env "SSH_AGENT_PID")
       (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")))
#+end_src
*** MacOS
There is a well known bug where starting Emacs from the dock, menu, Spotlight,
etc. does not properly read the $PATH variable you'd get from running
=echo $PATH= in your terminal.
#+begin_src emacs-lisp
    (cond
      ((eq system-type 'darwin)
        (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
        (setq exec-path (append exec-path '("/usr/local/bin")))
        (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin"))
        (setq exec-path (append exec-path '("/Library/TeX/texbin")))
        (setenv "PATH" (concat (getenv "PATH") ":/usr/local/Cellar/llvm/9.0.0_1/bin"))
        (setq exec-path (append exec-path '("/usr/local/Cellar/llvm/9.0.0_1/bin")))
        (setq inferior-lisp-program (executable-find "sbcl"))))
#+end_src
** Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Zach Pearson"
      user-mail-address "zach@zjp.codes"
      calendar-latitude 38.97
      calendar-longitude -95.24
      calendar-location-name "Lawrence, KS")
#+END_SRC
** hrs's =sensibledefaults.el=
*** Start searching for files at =~/= instead of =/=
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC

*** Delete trailing whitespace on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
*** Treat CamelCaseSubWords as separate words
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC
*** Always follow symlinks when opening files
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
*** Make shell scripts executable by default
Saves you from having to =chmod +x= everything
#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook
		  'executable-make-buffer-file-executable-if-script-p)
#+END_SRC
*** Adjust end-of-sentence spacing
It's $CURRENTYEAR, not 1950
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
*** Make parent directories on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook
		  (lambda ()
			(when buffer-file-name
			  (let ((dir (file-name-directory buffer-file-name)))
				(when (and (not (file-exists-p dir))
						   (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
				  (make-directory dir t))))))
#+END_SRC
*** Use =transient-mark-mode=
#+BEGIN_SRC emacs-lisp
(transient-mark-mode t)
#+END_SRC
*** Always auto-revert buffers
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
*** If text is highlighted, overwrite it on typing/inserting
#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC
*** Append newlines to files on save
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC
*** Confirm closing Emacs
#+BEGIN_SRC emacs-lisp
(defun sensible-defaults/confirm-closing-emacs ()
  "Ask if you're sure that you want to close Emacs."
  (setq confirm-kill-emacs 'y-or-n-p))
#+END_SRC
*** Present human-readable filesizes in dired
#+BEGIN_SRC emacs-lisp
(setq-default dired-listing-switches "-alh")
#+END_SRC
*** Shorten =yes/no= to =y/n=
#+BEGIN_SRC emacs-lisp
(defun sensible-defaults/shorten-yes-or-no ()
  "Don't ask `yes/no?', ask `y/n?'."
  (fset 'yes-or-no-p 'y-or-n-p))
#+END_SRC
*** Default to 80 column lines
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC
*** On Macs, use the old frame to open files
#+BEGIN_SRC emacs-lisp
(setq ns-pop-up-frames nil)
#+END_SRC
*** Paste at the point and not at the mouse
#+BEGIN_SRC emacs-lisp
(setq mouse-yank-at-point t)
#+END_SRC

** Coercing =magit= into reading my dotfiles repo
#+BEGIN_SRC emacs-lisp
;; https://emacs.stackexchange.com/a/58859
;; prepare the arguments
(setq dotfiles-git-dir (concat "--git-dir=" (expand-file-name "~/.dotfiles.git")))
(setq dotfiles-work-tree (concat "--work-tree=" (expand-file-name "~")))
;;;; function to start magit on dotfiles
(defun dotfiles-magit-status ()
  (interactive)
  (add-to-list 'magit-git-global-arguments dotfiles-git-dir)
  (add-to-list 'magit-git-global-arguments dotfiles-work-tree)
  (call-interactively 'magit-status))
;;;; wrapper to remove additional args before starting magit
(defun remove-dotfiles-args ()
  (interactive)
  (setq magit-git-global-arguments (remove dotfiles-git-dir magit-git-global-arguments))
  (setq magit-git-global-arguments (remove dotfiles-work-tree magit-git-global-arguments)))
#+END_SRC
* Behavior
** Use workspace tabs
#+begin_src emacs-lisp
(cond ((eq system-type 'gnu/linux) ;; Tabs do not work on NS yet.
       (tab-bar-mode)))
#+end_src
** Disable visual bell
They're all annoying, visual or not.
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src
** Windowmove
Lets us move through windows with =M-<left,down,up,right>= instead of endlessly
pressing =C-x o= until we hit the right spot.p
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings 'meta)
#+END_SRC

** Always run for every cursor
I'm an adult. If I don't want to run an action for every cursor, I won't make more than one cursor.
#+begin_src emacs-lisp
(setq mc/always-run-for-all t)
#+end_src
** Use =evil-search=
#+begin_src emacs-lisp
  (setq evil-search-module 'evil-search)
#+end_src
** Use hippie-expand
#+begin_src emacs-lisp
(setq smart-tab-using-hippie-expand t)
(global-smart-tab-mode)
#+end_src
* Visuals
** Change date format
#+begin_src emacs-lisp
(setq display-time-format " %A, %d %B %Y | %H:%M ")
(display-time-mode 1)
(doom-themes-treemacs-config)
#+end_src
* Org Mode
** Visual Style
By default, hierarchy is indicated by long lines of asterisks and collapsed
headings end in "..." -- let's change that!
#+begin_src emacs-lisp
(setq org-ellipsis "â¤µ")
#+end_src

** Workflow
I'm still trying to figure these out, but I know I need one status indicator
between TODO and DONE.
#+begin_src emacs-lisp
;; Bespoke TODO labels for my workflow
(setq org-todo-keywords
      '((sequence "TODO" "WORKING" "|" "DONE")))
(setq org-todo-keyword-faces
      '(("TODO" . org-warning)
        ("WORKING" . "yellow")
        ("DONE" . "green")))
#+end_src
I've gotten kinda sick of writing begin_src over and over, so:
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" . "SRC emacs-lisp\n"))
#+end_src

** Org Indentation
I have to take notes in my courses somehow, so let's make sure they're properly
formatted.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)
#+END_SRC
#
* Programming
** Metaprogramming Preferences
*** Always highlight code when possible
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC
*** Show Matching {Braces, Brackets, Parens}
Try writing LISP without it.
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
;; Also do this without delay
(setq show-paren-delay 0.0)
#+END_SRC
*** Indentation
It's good manners to conform to the indentation style of whatever project you're
contributing to. This is just the indentation style that I use in my projects.
Otherwise, I have directory-specific configuration files to tell Emacs to use
the project's BDFL's style.

Remember kids: Spaces are for fascists. You decide how whitespace looks on your
machine, not me.
#+BEGIN_SRC emacs-lisp
  ;; How wide to render tabs
  (setq my-tab-width 8)

  ;; ;; Use smart tabs -- tabs: indentation; spaces: alignment
  ;; (use-package smart-tabs-mode
  ;;   :config
  ;;   (smart-tabs-insinuate 'c 'c++ 'java 'javascript))

  ;; We want this to always be on except for languages that demand spaces
  (setq-default indent-tabs-mode t)
  (add-hook 'prog-mode-hook 'enable-tabs)

  ;; Hooks to enable or disable indent-tabs-mode
  (defun disable-tabs ()
    (setq indent-tabs-mode nil))
  (defun enable-tabs ()
    (setq indent-tabs-mode t)
    (setq tab-width my-tab-width))

  ;; Disable tabs for languages that demand spaces
  (add-hook 'lisp-mode-hook 'disable-tabs)
  (add-hook 'emacs-lisp-mode-hook 'disable-tabs)
  (add-hook 'python-mode-hook 'disable-tabs)

  ;; Delete entire tabs instead of spaces
  (setq backward-delete-char-untabify-method 'hungry)

  ;; Mark tabs but not trailing whitespace since we cull it on each save
  (setq whitespace-style '(face tabs tab-mark))

  ;; Render tabs with a pipe "|"
  (setq whitespace-display-mappings
   '((tab-mark 9 [124 9] [92 9])))

  ;; Always show whitespace
  (global-whitespace-mode)
#+END_SRC

*** Don't ask about auto-insertion
#+begin_src emacs-lisp
(setq auto-insert-query nil)
#+end_src
*** Clang-Format C++ Before Saving
It's a pretty expensive operation to format the whole buffer on every save, so
we'll advise the function that closes buffers that we want to run clang-format and
save right before we close the buffer.
#+begin_src emacs-lisp
(defun always-run-clang-format ()
    "Always run clang-format before saving C++ files."
; TODO only run if there is a clang-format file in the project root
    (interactive)
    (when (or (derived-mode-p 'c++-mode) (derived-mode-p 'c-mode))
      (clang-format-buffer)))

(advice-add 'save-buffer :before #'always-run-clang-format)
#+end_src
** University Programming Preferences
These are options that are only set because I have to due to class. They will
likely be disabled or removed altogether upon graduation. The regex looks
complex, but really all it does is ensure that these only trigger if I'm in a
subdirectory of any directory I use for class.
*** Standard Doxygen Header
#+begin_src emacs-lisp
  (eval-after-load 'autoinsert
    '(define-auto-insert
       '("\\(\\(\\[EECS\\|eecs\\|EECS...\\|eecs...\\|\\]\\).*\\(\\.\\[CC?\\|cc\\|cxx\\|cpp\\|c\\+\\+\\|]\\'\\)\\)" . "C++ Skeleton")
       '("Short description: "
         "// -*- C++ -*-" ?\n
         "/**" ?\n
         "* @author " (insert (user-full-name)) ?\n
         "* @file   " (file-name-nondirectory (buffer-file-name)) ?\n
         "* @date   " (insert (format-time-string "%d %B %Y")) ?\n
         "* @brief  " ?\n
         "*/" > ?\n ?\n )))
#+end_src
*** Header Autoinsert
#+begin_src emacs-lisp
  (eval-after-load 'autoinsert
    '(define-auto-insert
       '("\\(\\(\\[EECS\\|eecs\\|EECS...\\|eecs...\\|\\]\\).*\\(\\.\\([Hh]\\)\\'\\)\\)" . "C++ Header Skeleton")
       '("Short description: "
         "/**" ?\n
         "* @author " (insert (user-full-name)) ?\n
         "* @file   " (file-name-nondirectory (buffer-file-name)) ?\n
         "* @date   " (insert (format-time-string "%d %B %Y")) ?\n
         "* @brief  " ?\n
         "*/" > ?\n ?\n
         (let*
             ((fName (upcase (file-name-nondirectory (file-name-sans-extension buffer-file-name))))
              (ifDef (concat "#ifndef " fName "_H" "\n#define " fName "_H" "\n\n\n"))
              (begin (point-marker)))
           (progn
             (insert ifDef)
             (insert "\n#endif" " // " fName "_H_")
             (previous-line)
             (previous-line))))))
#+end_src
*** Makefile Autoinsert
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'autoinsert
    '(define-auto-insert
       '("\\(\\[EECS\\|eecs\\|EECS...\\|eecs...\\|\\]\\).*\\([Mm]akefile\\)\\'" . "Makefile Skeleton")
       '("Short description: "
         "# Author:  " (insert (user-full-name)) ?\n
         "# Project: "  ?\n
         "# Date:    " (insert (format-time-string "%d %B %Y")) ?\n ?\n

         "# --- Program Name ---" ?\n
         "FILENAME := " ?\n ?\n

         "# --- Include Dirs ---" ?\n
         "SRCDIR := ./src" ?\n
         "INCDIR := ./inc" ?\n
         "OBJDIR := ./obj" ?\n ?\n

         "# --- Debugging ---" ?\n
         "MT := valgrind" ?\n
         "MFLAGS := --leak-check=full --show-leak-kinds=all --track-origins=yes" ?\n ?\n

         "# --- Compiling ---" ?\n
         "GENFLAGS = -std=c++11 -Wall -Wextra -Wpedantic -Wconversion -I$(INCDIR) -g" ?\n
         "CXXFLAGS = $(GENFLAGS) -c" ?\n
         "LDFLAGS := $(GENFLAGS)" ?\n
         "EXPORT = -o $@" ?\n ?\n

         "# --- Sources ---" ?\n
         "SRCFILES := $(wildcard $(SRCDIR)/*.cpp)" ?\n
         "DEPENDENCIES := $(SRCFILES:$(SRCDIR)/%.cpp=$(OBJDIR)/%.o)" ?\n ?\n

         "# --- Phonies ---" ?\n
         ".PHONY: all clean rebuild memcheck debug $(SRCDIR) $(INCDIR) $(OBJDIR)" ?\n ?\n

         "# --- Compilation Options " ?\n
         "all: pre-build $(DEPENDENCIES)" ?\n
         ?\t "$(CXX) $(filter-out pre-build,$^) $(LDFLAGS) -o $(FILENAME)" ?\n ?\n

         "pre-build:" ?\n
         ?\t "@echo \"Attempting to create object directory...\"" ?\n
         ?\t "-mkdir obj" ?\n ?\n

         "$(OBJDIR)/%.o: $(SRCDIR)/%.cpp" ?\n
         ?\t "$(CXX) $(CXXFLAGS) $< $(EXPORT)" ?\n ?\n

         "rebuild: clean all" ?\n ?\n

         "clean:" ?\n
         ?\t "rm $(OBJDIR)/*.o *.*~ \\#*\\# | true 2>&1" ?\n ?\n)))
#+END_SRC
*** Homework Autoinsert
#+BEGIN_SRC emacs-lisp
(eval-after-load 'autoinsert
  '(define-auto-insert
     '("\\(\\[EECS...\\|eecs...\\|\\]\\).*\\(.*\\.org\\)\\'" . "Homework Skeleton")
     '("Short description: "
       "# -*- mode: Org; mode: visual-line; -*- " ?\n
       "#+TITLE: " ?\n
       "#+AUTHOR: " (insert (user-full-name)) " (2745693)" ?\n
       "#+DATE: " (insert (format-time-string "%d %B %Y")) ?\n
       "#+OPTIONS: toc:nil" ?\n
       "#+LATEX_CLASS: article" ?\n
       "#+LATEX_HEADER: \\usepackage{amsmath}" ?\n
       "#+LATEX_HEADER: \\usepackage{amssymb}" ?\n
       "#+LATEX_HEADER: \\usepackage{amsfonts}" ?\n
       "#+LATEX_HEADER: \\usepackage[margin=2.54cm]{geometry}" ?\n
       "#+LATEX_HEADER: \\usepackage{enumitem}" ?\n
       "#+LATEX_HEADER: \\usepackage{algorithm}" ?\n
       "#+LATEX_HEADER: \\usepackage{algcompatible}" ?\n
       "#+LATEX_HEADER: \\usepackage{algpseudocode}" ?\n
       "#+LATEX_HEADER: \\let\\olditemize=\\itemize \\let\\endolditemize=\\enditemize" ?\n
       "#+LATEX_HEADER: \\renewenvironment{itemize}{\\olditemize \\itemsep0.25em}{\\endolditemize}" ?\n
       "#+LATEX_HEADER: \\setlist[description]{leftmargin=\\parindent,labelindent=\\parindent}" ?\n
)))
#+END_SRC
** Lab Preferences
** Language-Specific Preferences
*** LSP
LSP is not a language; however, for any language that has LSP these are the options I want.
Since it's a minor mode intrinsically coupled to programming, it's appropriate to put it here.
#+begin_src emacs-lisp
(add-hook 'lsp-mode-hook #'(lambda () (electric-pair-mode -1)))
#+end_src
*** Gentoo Ebuilds
Ebuilds are written in shell, but that doesn't mean that I want this to be
inserted into every shell script file. Luckily there's a major mode for this.
#+begin_src emacs-lisp
  (eval-after-load 'autoinsert
    '(define-auto-insert
       '("\\.ebuild\\'" . "Gentoo Ebuild Header")
       '("Short description: "
         "# Copyright 1999-" (insert (format-time-string "%Y")) " Gentoo Authors" ?\n
         "# Distributed under the terms of the GNU General Public License v2" ?\n ?\n
         "EAPI=7" ?\n ?\n
         "DESCRIPTION=\"\"" ?\n
         "HOMEPAGE=\"\"" ?\n
         "SRC_URI=\"\"" ?\n ?\n
         "LICENSE=\"\"" ?\n
         "SLOT=\"0\"" ?\n
         "KEYWORDS=\"~amd64 ~x86\"" ?\n
         "IUSE=\"\"" ?\n ?\n
         "DEPEND=\"\"" ?\n
         "RDEPEND=\"${DEPEND}\"" ?\n
         "BDEPEND=\"\"" > ?\n ?\n)))
  (defun zjp-ebuild-mode-hook ()
    (auto-insert-mode)
    (auto-insert))
  (add-hook 'ebuild-mode-hook 'zjp-ebuild-mode-hook)
#+end_src
*** All C Derivatives
#+begin_src emacs-lisp
(setq c-default-style "k&r"
      c-basic-offset 8)
(c-set-offset 'access-label -1)
(c-set-offset 'case-label '+)

(defun zjp-c-mode-common-hook ()
  (auto-insert-mode)
  (auto-insert)
  (electric-pair-mode)
  (lambda ()
    (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
      (ggtags-mode 1))))
(add-hook 'c-mode-common-hook 'zjp-c-mode-common-hook)
#+end_src
*** Just C
*** Just C++
*** Makefiles
#+BEGIN_SRC emacs-lisp
(defun zjp-makefile-mode-hook ()
  (auto-insert-mode))
(add-hook 'makefile-mode-hook 'zjp-makefile-mode-hook)
#+END_SRC
*** Emacs Lisp
*** Make sure all new elisp files have the standard header
This is standard practice since around Emacs 24.
#+BEGIN_SRC emacs-lisp
(defun zjp-elisp-mode-hook ()
  (auto-insert))
(add-hook 'emacs-lisp-mode-hook 'zjp-elisp-mode-hook)
#+END_SRC
*** Lisp
*** (Xe)LaTeX
**** Minor Modes
To write lab reports for my undergrad, I basically needed a way to make Org
insert my own bespoke LaTeX header into a file instead of using its own
inbuilt headers. This includes author, date, and title declarations, and
involves reordering when =\begin{document}= is placed in the resulting .tex
file. Instead of changing the way Org does that /within Org/ (too inelegant)
I just defined my own mode and a hook for it. The following is the mode:

These are separate files that will be located [[https://github.com/zjp/lab-report-mode][here]] in the event that someone
else wants to use them; however, as I say /in that repo/, maintenance after
I graduate is unlikely.
***** Chemistry Report Mode
#+begin_src emacs-lisp
;;(load-file "~/lab-report-mode/acs-mode.el")
#+end_src
***** IEEE Transaction Mode
#+begin_src emacs-lisp
;;(load-file "~/lab-report-mode/ieee-mode.el")
#+end_src

*** HTML, CSS, JS, RJSX, etc
#+begin_src emacs-lisp
(defun zjp-rjsx-mode-hook ()
  (whitespace-mode)
  (setq js-indent-level 2))
(defun zjp-css-mode-hook ()
  (whitespace-mode)
  (setq css-indent-offset 2))
(add-hook 'rjsx-mode-hook 'zjp-rjsx-mode-hook)
(add-hook 'css-mode-hook 'zjp-css-mode-hook)
#+end_src
* Utility Functions
** Kill whitespace from point to next word
Useful for vertical alignment.
#+begin_src emacs-lisp
(defun whack-whitespace (arg)
  "Delete all white space from point to the next word.  With prefix ARG
   delete across newlines as well.  The only danger in this is that you
   don't have to actually be at the end of a word to make it work.  It
   skips over to the next whitespace and then whacks it all to the next
   word."
  (interactive "P")
    (let ((regexp (if arg "[ \t\n]+" "[ \t]+")))
      (re-search-forward regexp nil t)
        (replace-match "" nil nil)))
#+end_src
* Keybindings
** Better Defaults
#+begin_src emacs-lisp
(global-unset-key (kbd "C-z")) ;; I mean really, why is this even a binding.
(global-unset-key (kbd "C-x C-c")) ;; Again, way too easy to fatfinger C-x C-s
(global-set-key (kbd "s-u") 'revert-buffer)
#+end_src
** =buffer-move=
#+begin_src emacs-lisp
(global-set-key (kbd "<C-S-up>")    'buf-move-up)
(global-set-key (kbd "<C-S-down>")  'buf-move-down)
(global-set-key (kbd "<C-S-left>")  'buf-move-left)
(global-set-key (kbd "<C-S-right>") 'buf-move-right)
#+end_src
** =multiple-cursors=
#+begin_src emacs-lisp
;; These are required to make Emacs recognize the keymap for some reason
(use-package multiple-cursors)
(use-package mc-extras)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-s->") 'mc/unmark-next-like-this)
(global-set-key (kbd "C-s-<") 'mc/unmark-previous-like-this)
(global-set-key (kbd "C-s-a") 'mc/mark-all-like-this)
(global-set-key (kbd "C-s-e") 'mc/edit-lines)
(global-set-key (kbd "C-s-n") 'mc/insert-numbers)
(global-set-key (kbd "C-s-l") 'mc/insert-letters)
#+end_src
** =lsp=
#+begin_src emacs-lisp
(global-set-key (kbd "M-s-d") 'lsp-find-definition)
(global-set-key (kbd "M-s-D") 'lsp-find-declaration)
#+end_src
** =tab-bar=
#+begin_src emacs-lisp
(global-set-key (kbd "C-x t n") 'tab-bar-new-tab)

(global-set-key (kbd "C-x t c") 'tab-close)


(global-set-key (kbd "C-s-r") 'remove-dotfiles-args)
(global-set-key (kbd "C-s-d") 'dotfiles-magit-status)
#+end_src

* Modes
#+begin_src emacs-lisp
;; Compiling hs-org is not working, so manually load it
(treemacs)
(treemacs--set-width 25)
(treemacs-toggle-fixed-width)
(load-file "~/.emacs.d/elpa/develop/hideshow-org-20120223.2250/hideshow-org.el")
#+end_src
